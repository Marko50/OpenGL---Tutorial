#version 330 core


  struct Light{
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
  };

  struct Material{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
  };


  out vec4 FragColor;

  in vec3 Normal;
  in vec3 FragPos;
  in vec3 ourColor;
  in vec2 TexCoord;

  in vec3 vPos;

  uniform sampler2D ourTexture1;
  uniform sampler2D ourTexture2;
  uniform Material material;
  uniform Light light;


  void main()
  {
    //ambient
    vec4 ambient = vec4(light.ambient,1.0) * vec4(material.ambient,1.0);

    //diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm,lightDir),0.0);
    vec4 diffuse = vec4(light.diffuse,1.0) * (diff * vec4(material.diffuse,1.0));

    //specular
    vec3 viewDir = normalize(vPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec4 specular = vec4(light.specular,1.0) * (spec * vec4(material.specular,1.0));

    //result
    vec4 result = (ambient + diffuse + specular);
    FragColor = result;
  }